Index: verify.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import re\r\n\r\n\r\ndef verify_birth_date(date):\r\n    \"\"\"\r\n    Verify birth date, returns false if not valid\r\n    :param date:\r\n    :return:\r\n    \"\"\"\r\n    valid = True\r\n    print(date)\r\n    if not re.match('%Y/%M/%d', date):\r\n        valid = False\r\n\r\n    return valid\r\n\r\n\r\ndef verify_str(string):\r\n    \"\"\"\r\n    Verify string, such as name, must not be None. Returns false if not valid\r\n    :param string:\r\n    :return:\r\n    \"\"\"\r\n    valid = True\r\n\r\n    if not isinstance(string, str) or string is None:\r\n        valid = False\r\n\r\n    return valid\r\n\r\n\r\ndef verify_str_none(string):\r\n    \"\"\"\r\n    Verify string, such as name, allows value to be None. Returns false if not valid\r\n    :param string:\r\n    :return:\r\n    \"\"\"\r\n    valid = True\r\n\r\n    if not isinstance(string, str):\r\n        valid = False\r\n\r\n    if string is None:\r\n        valid = True\r\n\r\n    return valid\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/verify.py b/verify.py
--- a/verify.py	(revision 404315a9f24b35c690b7731d6ee58e8eb43e1730)
+++ b/verify.py	(date 1620667270718)
@@ -8,9 +8,10 @@
     :return:
     """
     valid = True
-    print(date)
-    if not re.match('%Y/%M/%d', date):
+    #print(date)
+    if not re.match('(?<!\d)(?:(?:(?:1[6-9]|[2-9]\d)?\d{2})(?:(?:(?:0[13578]|1[02])31)|(?:(?:0[1,3-9]|1[0-2])(?:29|30)))|(?:(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))0229)|(?:(?:1[6-9]|[2-9]\d)?\d{2})(?:(?:0?[1-9])|(?:1[0-2]))(?:0?[1-9]|1\d|2[0-8]))(?!\d)', date):
         valid = False
+        print("date")
 
     return valid
 
@@ -25,6 +26,7 @@
 
     if not isinstance(string, str) or string is None:
         valid = False
+        print("string: "+ string)
 
     return valid
 
Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from datetime import datetime\r\nfrom urllib import request\r\n\r\nimport flask.json\r\nfrom flask import Flask\r\nimport os\r\nfrom flask import request\r\nfrom flask import Response\r\nimport re\r\n\r\nimport post\r\nimport user\r\nfrom flask import Flask, request, jsonify\r\nfrom flask import json\r\n\r\nimport verify\r\nfrom verify import verify_str, verify_birth_date, verify_str_none\r\nfrom json import dumps as json_dict\r\nimport authentication\r\nimport hashlib\r\n\r\nimport util\r\n\r\nfrom authentication import authenticated as auth\r\nfrom authentication import auth_comment\r\nfrom authentication import auth_post\r\n\r\nimport jwt\r\n\r\napp = Flask(__name__)\r\napp.config['SECRET_KEY'] = \"0fc8-200-41ayyup-ad0c-11eb-aedf-b0fc36c63f34\"\r\ninvalid_auth_code = 401\r\nsuccess_code = 200\r\nfailure_code = 400\r\n\r\n\r\n@app.route('/', methods=['GET', 'POST'])\r\ndef request_connection():\r\n    return \"Flask Server & Android are Working Successfully\"\r\n\r\n\r\n@app.route('/api/user', methods=['POST'])\r\ndef user_create():\r\n    try:\r\n        json_request = request.json\r\n        name = json_request[\"name\"]\r\n        birth = json_request[\"birth_date\"]\r\n        avatar_path = json_request[\"avatar_path\"]\r\n        password = json_request[\"password\"]\r\n\r\n        try:\r\n            user_tags = json_request[\"user_tags\"]\r\n        except KeyError:\r\n            user_tags = \"\"\r\n\r\n        try:\r\n            desc = json_request[\"description\"]\r\n        except KeyError:\r\n            desc = \"\"\r\n\r\n        # Input checking\r\n        if not verify_str(name) or not verify_birth_date(birth) or not verify_str(avatar_path) or not verify_str(\r\n                password):\r\n            return Response(\"Invalid parameters\", status=failure_code, mimetype='application/json')\r\n\r\n        if user_tags is None:\r\n            user_tags = \"\"\r\n            return Response(\"Invalid tags\", status=failure_code, mimetype='application/json')\r\n\r\n        user_id = user.create_user(\r\n            name,\r\n            datetime.strptime(birth, \"%Y/%M/%d\").date(),\r\n            avatar_path,\r\n            password,\r\n            desc,\r\n            user_tags\r\n        )\r\n\r\n        print(\"user created \" + user_id)\r\n\r\n        response_json = flask.json.dumps({\"username\": user_id})\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n    except:\r\n        raise Exception\r\n        response_json = flask.json.dumps({\"username\": \"INVALID\"})\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/user/<username>', methods=['PUT'])\r\ndef user_update(username):\r\n    assert username == request.view_args['username']\r\n\r\n    if not auth(  # authenticate user\r\n        app.config['SECRET_KEY'],\r\n        request,\r\n        username\r\n    ):\r\n        response_json = flask.json.dumps({\"status\": \"Invalid authentication\"})\r\n        return Response(response_json, status=invalid_auth_code, mimetype='application/json')\r\n\r\n    try:\r\n        json_request = request.json\r\n\r\n        print(json_request)\r\n\r\n        values = util.json_key(\r\n            request,\r\n            {\r\n                \"name\" : False,\r\n                \"avatar_path\" : False,\r\n                \"reward_points\" : False,\r\n                \"tags\" : False,\r\n                \"desc\" : False\r\n            }\r\n        )\r\n\r\n        print(values['name'])\r\n\r\n        user.update_user(\r\n            username,\r\n            values['name'],\r\n            values['avatar_path'],\r\n            values['reward_points'],\r\n            values['tags'],\r\n            values['desc']\r\n        )\r\n\r\n        response_json = json_dict(values, indent=4)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n    except Exception as e:\r\n        raise Exception\r\n        print(\"Unable to update user\")\r\n\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/user/<username>', methods=['GET'])\r\ndef get_user(username):\r\n    assert username == request.view_args['username']\r\n\r\n    if not verify.verify_str(username):\r\n        return Response(\"Invalid parameters\", status=failure_code, mimetype='application/json')\r\n\r\n    response_json = json_dict(\r\n        user.user_info(username),\r\n        indent=4,\r\n        default=str\r\n    )\r\n    return Response(response_json, status=success_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/user/<username>', methods=['DELETE'])\r\ndef delete_user(username):\r\n    \"\"\"\r\n    Delete a user\r\n    :param username:\r\n    :return:\r\n    \"\"\"\r\n    assert username == request.view_args['username']\r\n\r\n    if not auth(  # authenticate user\r\n        app.config['SECRET_KEY'],\r\n        request,\r\n        username\r\n    ):\r\n        response_json = flask.json.dumps({\"status\": \"Invalid authentication\"})\r\n        return Response(response_json, status=invalid_auth_code, mimetype='application/json')\r\n\r\n    try:\r\n        user.delete_user(username)\r\n        response_json = json_dict({\"username\": username}, indent=4)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n    except:\r\n        print(\"Unable to delete user\")\r\n        response_json = json_dict({\"status\": \"INVALID\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/user/<username>/reward', methods=['GET'])\r\ndef user_reward_get(username):\r\n    \"\"\"\r\n    Get a users reward points\r\n    :param username:\r\n    :return:\r\n    \"\"\"\r\n    try:\r\n        assert username == request.view_args['username']\r\n\r\n        points = user.user_reward_points(username)\r\n\r\n        response_json = json_dict({\"reward_points\": points}, indent=4)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n\r\n    except:\r\n        response_json = json_dict({\"status\": \"INVALID\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/user/<username>/reward', methods=['PUT'])\r\ndef user_reward_update(username):\r\n    \"\"\"\r\n    Update a users reward points\r\n    :param username:\r\n    :return:\r\n    \"\"\"\r\n    try:\r\n        assert username == request.view_args['username']\r\n\r\n        if not auth(  # authenticate user\r\n                app.config['SECRET_KEY'],\r\n                request,\r\n                username\r\n        ):\r\n            response_json = flask.json.dumps({\"status\": \"Invalid authentication\"})\r\n            return Response(response_json, status=invalid_auth_code, mimetype='application/json')\r\n\r\n        json_request = request.json\r\n\r\n        try:\r\n            points = json_request['reward_points']\r\n        except KeyError:\r\n            response_json = json_dict({\"status\": \"reward_points required paramter\"}, indent=4)\r\n            return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n        user.update_user(username, reward_points=points)\r\n\r\n        response_json = json_dict({\"reward_points\": points}, indent=4)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n\r\n    except:\r\n        response_json = json_dict({\"status\": \"INVALID\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/user/<username>/tags', methods=['GET'])\r\ndef user_tag_get(username):\r\n    \"\"\"\r\n    Retrive tags associated with user\r\n    :param username:\r\n    :return:\r\n    \"\"\"\r\n    try:\r\n        assert username == request.view_args['username']\r\n\r\n        tags = user.user_info(username)['user_tags']\r\n\r\n        if not isinstance(tags, str):\r\n            response_json = json_dict({\"status\": \"INVALID\"}, indent=4)\r\n            return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n        response_json = json_dict({\"user_tags\": tags}, indent=4)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n\r\n    except:\r\n        print(\"Unable to get user tags\")\r\n        response_json = json_dict({\"status\": \"INVALID\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/user/<username>/tags', methods=['PUT'])\r\ndef user_tag_add(username):\r\n    \"\"\"\r\n    Add new tags to a user\r\n    :param username:\r\n    :return:\r\n    \"\"\"\r\n\r\n    try:\r\n        assert username == request.view_args['username']\r\n\r\n        if not auth(  # authenticate user\r\n                app.config['SECRET_KEY'],\r\n                request,\r\n                username\r\n        ):\r\n            response_json = flask.json.dumps({\"status\": \"Invalid authentication\"})\r\n            return Response(response_json, status=invalid_auth_code, mimetype='application/json')\r\n\r\n        json_request = request.json\r\n\r\n        # Check user_tags parameter exists\r\n        try:\r\n            new_tags = json_request['user_tags']\r\n        except KeyError:\r\n            print(\"No user_tags paramter\")\r\n            response_json = json_dict({\"status\": \"user_tags paramter not found\"}, indent=4)\r\n            return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n        current_tags = user.user_info(username)['user_tags']\r\n\r\n        seperate = \"\" if current_tags == \"\" else \",\"  # stop incorrect commas at start of comma separated lists\r\n        current_tags = current_tags + seperate + new_tags.replace(\" \", \"\")  # remove whitespace in tags\r\n\r\n        user.update_user(username, tags=current_tags)\r\n\r\n        response_json = json_dict({\"user_tags\": current_tags}, indent=4)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n\r\n    except:\r\n        print(\"Unable to update (PUT) user tags\")\r\n        response_json = json_dict({\"status\": \"INVALID\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/user/<username>/tags', methods=['DELETE'])\r\ndef user_tags_clear(username):\r\n    \"\"\"\r\n    Delete ALL tags associate with user\r\n    :param username:\r\n    :return:\r\n    \"\"\"\r\n\r\n    if not auth(  # authenticate user\r\n            app.config['SECRET_KEY'],\r\n            request,\r\n            username\r\n    ):\r\n        response_json = flask.json.dumps({\"status\": \"Invalid authentication\"})\r\n        return Response(response_json, status=invalid_auth_code, mimetype='application/json')\r\n\r\n    if not auth(  # authenticate user\r\n            app.config['SECRET_KEY'],\r\n            request,\r\n            username\r\n    ):\r\n        response_json = flask.json.dumps({\"status\": \"Invalid authentication\"})\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n    try:\r\n        assert username == request.view_args['username']\r\n\r\n        user.update_user(username, tags=\"\")\r\n\r\n        return Response(\"\", status=success_code, mimetype='application/json')\r\n\r\n    except:\r\n        print(\"Unable to clear all user tags\")\r\n        response_json = json_dict({\"status\": \"INVALID\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/user/<username>/tag', methods=['DELETE'])\r\ndef user_tag_remove(username):\r\n    \"\"\"\r\n    Delete SINGLE tag associate with user\r\n    :param username:\r\n    :return:\r\n    \"\"\"\r\n\r\n    if not auth(  # authenticate user\r\n            app.config['SECRET_KEY'],\r\n            request,\r\n            username\r\n    ):\r\n        response_json = flask.json.dumps({\"status\": \"Invalid authentication\"})\r\n        return Response(response_json, status=invalid_auth_code, mimetype='application/json')\r\n\r\n    try:\r\n        assert username == request.view_args['username']\r\n\r\n        json_request = request.json\r\n\r\n        # Check user_tags paramter exists, TODO replace with function\r\n        try:\r\n            tag = json_request['user_tag']\r\n        except KeyError:\r\n            tags = \"\"\r\n            print(\"No user_tags paramter\")\r\n            response_json = json_dict({\"status\": \"user_tags paramter not found\"}, indent=4)\r\n            return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n        tags = user.user_info(username)['user_tags']\r\n        tags = util.tag_validator(tags)  # format tags\r\n\r\n        user.update_user(username, tags=tags)\r\n\r\n        response_json = json_dict({\"user_tags\": tags}, indent=4)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n\r\n    except:\r\n        print(\"Unable to delete user tag\")\r\n        response_json = json_dict({\"status\": \"INVALID\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/post', methods=['POST'])\r\ndef create_post():\r\n    \"\"\"\r\n    Create a new post\r\n    :return:\r\n    \"\"\"\r\n\r\n    try:\r\n        try: # Check parameters follow expected schema\r\n            body_param = util.json_key(request,\r\n                                       {\r\n                                           \"username\":True,\r\n                                           \"message\":True,\r\n                                           \"photo_path\":False,\r\n                                           \"video_path\":False,\r\n                                           \"post_tags\":True\r\n                                       })\r\n        except KeyError:\r\n            print(\"Couldnt create post : missing required paramters\")\r\n            response_json = json_dict({\"status\": \"missing required parameters\"}, indent=4)\r\n            return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n        if not auth(  # authenticate user\r\n                app.config['SECRET_KEY'],\r\n                request,\r\n                body_param['username']\r\n        ):\r\n            response_json = flask.json.dumps({\"status\": \"Invalid authentication\"})\r\n            return Response(response_json, status=invalid_auth_code, mimetype='application/json')\r\n\r\n        post_id = post.create_post(\r\n            body_param['username'],\r\n            body_param['message'],\r\n            0,\r\n            util.tag_validator(body_param['post_tags']),  # format tags\r\n            body_param['photo_path'],\r\n            body_param['video_path']\r\n        )\r\n\r\n        response_json = json_dict({\"post_id\": post_id}, indent=4)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n\r\n    except:\r\n        print(\"Unable to create post\")\r\n        response_json = json_dict({\"status\": \"unable to create post\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/post/<post_id>/likes', methods=['PUT'])\r\ndef update_post_likes(post_id):\r\n    \"\"\"\r\n    Update the likes associated with a post\r\n    :param post_id:\r\n    :return:\r\n    \"\"\"\r\n    try:\r\n        assert post_id == request.view_args['post_id']\r\n\r\n        # Get current likes\r\n        current_likes = post.get_post(post_id)['likes']\r\n        new_likes = current_likes + 1\r\n\r\n        post.update_post(\r\n            post_id,\r\n            likes=new_likes\r\n        )\r\n\r\n        response_json = json_dict({\"post_likes\": new_likes}, indent=4)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n    except:\r\n        print(\"Unable to update post likes\")\r\n        response_json = json_dict({\"status\": \"unable to update post likes\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/post/<post_id>', methods=['GET'])\r\ndef get_post_info(post_id):\r\n    \"\"\"\r\n    Get information post\r\n    Formatted as specific in API documentation\r\n    :param post_id:\r\n    :return:\r\n    \"\"\"\r\n\r\n    try:\r\n        assert post_id == request.view_args['post_id']\r\n\r\n        post_info = post.get_post(post_id)\r\n\r\n        response_json = json_dict(post_info, indent=4, default=str)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n\r\n    except:\r\n        print(\"Unable to get post info\")\r\n        response_json = json_dict({\"status\": \"unable to update post likes\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/post/<post_id>/comments', methods=['GET'])\r\ndef get_comments(post_id):\r\n    \"\"\"\r\n    Get a (JSON) list of all comments associated with a post\r\n    :param post_id:\r\n    :return:\r\n    \"\"\"\r\n\r\n    try:\r\n        assert post_id == request.view_args['post_id']\r\n\r\n        comments = post.get_comments(\r\n            post_id\r\n        )\r\n\r\n        response_json = json_dict(comments, indent=4, default=str)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n\r\n    except:\r\n        print(\"Unable to get post info\")\r\n        response_json = json_dict({\"status\": \"unable to update post likes\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/post/<post_id>/comment', methods=['POST'])\r\ndef add_comment(post_id):\r\n    \"\"\"\r\n    Adds a comment to a post\r\n    :param post_id:\r\n    :return:\r\n    \"\"\"\r\n\r\n    try:\r\n        assert post_id == request.view_args['post_id']\r\n\r\n        print(app.config['SECRET_KEY'])\r\n        if not auth_post(  # authenticate user\r\n                app.config['SECRET_KEY'],\r\n                request,\r\n                post_id\r\n        ):\r\n            response_json = flask.json.dumps({\"status\": \"Invalid authentication\"})\r\n            return Response(response_json, status=invalid_auth_code, mimetype='application/json')\r\n\r\n        try:  # verify required body parameters\r\n            values = util.json_key(\r\n                request,\r\n                {\r\n                    \"username\": True,\r\n                    \"message\": True\r\n                }\r\n            )\r\n        except KeyError:\r\n            response_json = json_dict({\"status\": \"missing essential parameters\"}, indent=4)\r\n            return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n        comment_id = post.add_comment(\r\n            post_id,\r\n            values['message'],\r\n            values['username']\r\n        )\r\n\r\n        response_json = json_dict({\"comment_id\": comment_id}, indent=4)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n\r\n    except:\r\n        print(\"Unable to add post\")\r\n        response_json = json_dict({\"status\": \"unable to add post\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/user/<username>/posts', methods=['GET'])\r\ndef user_posts(username):\r\n    \"\"\"\r\n    Retrieves posts associated with a user\r\n    :param username:\r\n    :return:\r\n    \"\"\"\r\n\r\n    try:\r\n        posts = post.get_post_user(username)\r\n\r\n        response_json = json_dict(posts, indent=4, default=str)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n    except:\r\n        print(\"Unable to get posts associated with user\")\r\n        raise Exception\r\n        response_json = json_dict({\"status\": \"unable to get user posts\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/posts', methods=['GET'])\r\ndef user_posts_filter():\r\n    \"\"\"\r\n    Retrive posts associated with a (filter) paramters: tags & name\r\n    If no paramters, returns all posts\r\n    :return:\r\n    \"\"\"\r\n\r\n    try:\r\n        try:  # verify required body parameters\r\n            values = util.json_key(\r\n                request,\r\n                {\r\n                    \"tags\": False,\r\n                    \"name\": False\r\n                }\r\n            )\r\n        except KeyError:\r\n            response_json = json_dict({\"status\": \"missing essential parameters\"}, indent=4)\r\n            return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n        if values['tags'] is None and values['name'] is None:\r\n            posts = post.get_posts()\r\n        else:\r\n            posts = post.get_post_tag_name(\r\n                tags=values['tags'],\r\n                name=values['name']\r\n            )\r\n\r\n        response_json = json_dict(posts, indent=4, default=str)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n    except:\r\n        raise Exception\r\n        print(\"Unable to get posts associated with tags or name\")\r\n        response_json = json_dict({\"status\": \"unable to get posts\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n@app.route('/api/post/<post_id>', methods=['DELETE'])\r\ndef delete_post(post_id):\r\n    \"\"\"\r\n    Delete post and associated comments\r\n    :param post_id:\r\n    :return:\r\n    \"\"\"\r\n\r\n    try:\r\n        assert post_id == request.view_args['post_id']\r\n\r\n        if not auth_post(  # authenticate user\r\n                app.config['SECRET_KEY'],\r\n                request,\r\n                post_id\r\n        ):\r\n            response_json = flask.json.dumps({\"status\": \"Invalid authentication\"})\r\n            return Response(response_json, status=invalid_auth_code, mimetype='application/json')\r\n\r\n        post.remove_post_comments(post_id)\r\n        post.remove_post(post_id)\r\n\r\n        response_json = json_dict({\"post_id\":post_id}, indent=4, default=str)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n    except:\r\n        print(\"Unable to get delete posts associated with ID \" + post_id)\r\n        response_json = json_dict({\"status\": \"unable to delete posts\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/comment/<comment_id>', methods=['DELETE'])\r\ndef delete_comment(comment_id):\r\n    \"\"\"\r\n    Delete a single comment\r\n    :param comment_id:\r\n    :return:\r\n    \"\"\"\r\n\r\n    try:\r\n        assert comment_id == request.view_args['comment_id']\r\n\r\n        if not auth_comment(  # authenticate user\r\n                app.config['SECRET_KEY'],\r\n                request,\r\n                comment_id\r\n        ):\r\n            response_json = flask.json.dumps({\"status\": \"Invalid authentication\"})\r\n            return Response(response_json, status=invalid_auth_code, mimetype='application/json')\r\n\r\n        post.remove_comment(comment_id)\r\n\r\n        response_json = json_dict({\"comment_id\": comment_id}, indent=4, default=str)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n\r\n    except:\r\n        print(\"Unable to delete comment \" + comment_id)\r\n        response_json = json_dict({\"status\": \"unable to delete comment\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/post/<post_id>/tags', methods=['PUT'])\r\ndef post_tags(post_id):\r\n    \"\"\"\r\n    Update a post tags\r\n    :param post_id:\r\n    :return:\r\n    \"\"\"\r\n\r\n    try:\r\n        assert post_id == request.view_args['post_id']\r\n\r\n        if not auth_post(  # authenticate user\r\n                app.config['SECRET_KEY'],\r\n                request,\r\n                post_id\r\n        ):\r\n            response_json = flask.json.dumps({\"status\": \"Invalid authentication\"})\r\n            return Response(response_json, status=invalid_auth_code, mimetype='application/json')\r\n\r\n        try:\r\n            tags = request.json['post_tags']\r\n        except KeyError:\r\n            response_json = json_dict({\"status\": \"missing required paramters\"}, indent=4)\r\n            return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n        current_tags = post.get_post(post_id)['post_tags']\r\n        new_tags = util.tag_validator(current_tags + \",\" + tags)\r\n\r\n        post.update_post(\r\n            post_id,\r\n            new_tags\r\n        )\r\n\r\n        response_json = json_dict({\"post_tags\": new_tags}, indent=4, default=str)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n    except:\r\n        print(\"Unable to add tag(s) to \" + post_id)\r\n        response_json = json_dict({\"status\": \"unable to add tag(s)\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/post/<post_id>/tag', methods=['DELETE'])\r\ndef delete_tag(post_id):\r\n    \"\"\"\r\n    Remove tag from post\r\n    :param post_id:\r\n    :return:\r\n    \"\"\"\r\n\r\n    try:\r\n\r\n        if not auth_post(  # authenticate user\r\n                app.config['SECRET_KEY'],\r\n                request,\r\n                post_id\r\n        ):\r\n            response_json = flask.json.dumps({\"status\": \"Invalid authentication\"})\r\n            return Response(response_json, status=invalid_auth_code, mimetype='application/json')\r\n\r\n        try:\r\n            tag = request.json['post_tag']\r\n        except KeyError:\r\n            response_json = json_dict({\"status\": \"missing required paramter\"}, indent=4)\r\n            return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n        current_tags = post.get_post(post_id)['post_tags']\r\n\r\n        new_tags = util.tag_validator(\r\n            current_tags.replace(tag, \"\")\r\n        )\r\n\r\n        post.update_post(\r\n            post_id,\r\n            post_tags=new_tags\r\n        )\r\n\r\n        response_json = json_dict({\"post_tags\": new_tags}, indent=4, default=str)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n\r\n    except:\r\n        print(\"Unable to remove tag for \" + post_id)\r\n        response_json = json_dict({\"status\": \"unable to remove tag\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\n@app.route('/api/token/<username>', methods=['GET'])\r\ndef get_token(username):\r\n    \"\"\"\r\n    Generate authentication token, checks password\r\n    :param username:\r\n    :return:\r\n    \"\"\"\r\n    try:\r\n        assert username == request.view_args['username']\r\n\r\n        print(request.headers)\r\n\r\n        try:\r\n            password = request.headers.get(\"Password\")\r\n        except KeyError:\r\n            response_json = json_dict({\"status\": \"missing required header paramter\"}, indent=4)\r\n            return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n        # hash password\r\n        hashed_password = util.hash_password(password)\r\n        print(hashed_password)\r\n\r\n        # check password\r\n        if not user.check_password(username, hashed_password):\r\n            response_json = json_dict({\"status\": \"incorrect password provided\"}, indent=4)\r\n            return Response(response_json, status=401, mimetype='application/json')\r\n\r\n        token = authentication.encode_token(app.config['SECRET_KEY'], username)\r\n\r\n        response_json = json_dict({\"token\": token}, indent=4, default=str)\r\n        return Response(response_json, status=success_code, mimetype='application/json')\r\n\r\n    except:\r\n        raise Exception\r\n        print(\"Unable to generate token for \" + username)\r\n        response_json = json_dict({\"status\": \"unable to generate token\"}, indent=4)\r\n        return Response(response_json, status=failure_code, mimetype='application/json')\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision 404315a9f24b35c690b7731d6ee58e8eb43e1730)
+++ b/app.py	(date 1620666642223)
@@ -89,10 +89,10 @@
 @app.route('/api/user/<username>', methods=['PUT'])
 def user_update(username):
     assert username == request.view_args['username']
-
+    token = request.headers['x-access-tokens']
     if not auth(  # authenticate user
         app.config['SECRET_KEY'],
-        request,
+        token,
         username
     ):
         response_json = flask.json.dumps({"status": "Invalid authentication"})
@@ -203,12 +203,13 @@
     :param username:
     :return:
     """
+    token = request.headers['x-access-tokens']
     try:
         assert username == request.view_args['username']
 
         if not auth(  # authenticate user
                 app.config['SECRET_KEY'],
-                request,
+                token,
                 username
         ):
             response_json = flask.json.dumps({"status": "Invalid authentication"})
@@ -219,7 +220,7 @@
         try:
             points = json_request['reward_points']
         except KeyError:
-            response_json = json_dict({"status": "reward_points required paramter"}, indent=4)
+            response_json = json_dict({"status": "reward_points required parameter"}, indent=4)
             return Response(response_json, status=failure_code, mimetype='application/json')
 
         user.update_user(username, reward_points=points)
@@ -264,13 +265,13 @@
     :param username:
     :return:
     """
-
+    token = request.headers['x-access-tokens']
     try:
         assert username == request.view_args['username']
 
         if not auth(  # authenticate user
                 app.config['SECRET_KEY'],
-                request,
+                token,
                 username
         ):
             response_json = flask.json.dumps({"status": "Invalid authentication"})
@@ -389,8 +390,9 @@
     Create a new post
     :return:
     """
-
+    token = request.headers['x-access-tokens']
     try:
+
         try: # Check parameters follow expected schema
             body_param = util.json_key(request,
                                        {
@@ -405,14 +407,10 @@
             response_json = json_dict({"status": "missing required parameters"}, indent=4)
             return Response(response_json, status=failure_code, mimetype='application/json')
 
-        if not auth(  # authenticate user
-                app.config['SECRET_KEY'],
-                request,
-                body_param['username']
-        ):
+        if not auth(app.config['SECRET_KEY'], token, body_param['username']):
+
             response_json = flask.json.dumps({"status": "Invalid authentication"})
             return Response(response_json, status=invalid_auth_code, mimetype='application/json')
-
         post_id = post.create_post(
             body_param['username'],
             body_param['message'],
@@ -421,12 +419,11 @@
             body_param['photo_path'],
             body_param['video_path']
         )
-
         response_json = json_dict({"post_id": post_id}, indent=4)
         return Response(response_json, status=success_code, mimetype='application/json')
 
-    except:
-        print("Unable to create post")
+    except Exception as e:
+        print(e)
         response_json = json_dict({"status": "unable to create post"}, indent=4)
         return Response(response_json, status=failure_code, mimetype='application/json')
 
@@ -477,7 +474,7 @@
 
     except:
         print("Unable to get post info")
-        response_json = json_dict({"status": "unable to update post likes"}, indent=4)
+        response_json = json_dict({"status": "unable to find Post"}, indent=4)
         return Response(response_json, status=failure_code, mimetype='application/json')
 
 
@@ -512,14 +509,14 @@
     :param post_id:
     :return:
     """
-
+    token = request.headers['x-access-tokens']
     try:
         assert post_id == request.view_args['post_id']
 
         print(app.config['SECRET_KEY'])
         if not auth_post(  # authenticate user
                 app.config['SECRET_KEY'],
-                request,
+                token,
                 post_id
         ):
             response_json = flask.json.dumps({"status": "Invalid authentication"})
@@ -592,7 +589,6 @@
         except KeyError:
             response_json = json_dict({"status": "missing essential parameters"}, indent=4)
             return Response(response_json, status=failure_code, mimetype='application/json')
-
         if values['tags'] is None and values['name'] is None:
             posts = post.get_posts()
         else:
@@ -600,11 +596,10 @@
                 tags=values['tags'],
                 name=values['name']
             )
-
         response_json = json_dict(posts, indent=4, default=str)
         return Response(response_json, status=success_code, mimetype='application/json')
     except:
-        raise Exception
+        #raise Exception
         print("Unable to get posts associated with tags or name")
         response_json = json_dict({"status": "unable to get posts"}, indent=4)
         return Response(response_json, status=failure_code, mimetype='application/json')
@@ -676,13 +671,13 @@
     :param post_id:
     :return:
     """
-
+    token = request.headers['x-access-tokens']
     try:
         assert post_id == request.view_args['post_id']
 
         if not auth_post(  # authenticate user
                 app.config['SECRET_KEY'],
-                request,
+                token,
                 post_id
         ):
             response_json = flask.json.dumps({"status": "Invalid authentication"})
@@ -762,6 +757,7 @@
     :return:
     """
     try:
+        print(username)
         assert username == request.view_args['username']
 
         print(request.headers)
@@ -782,7 +778,6 @@
             return Response(response_json, status=401, mimetype='application/json')
 
         token = authentication.encode_token(app.config['SECRET_KEY'], username)
-
         response_json = json_dict({"token": token}, indent=4, default=str)
         return Response(response_json, status=success_code, mimetype='application/json')
 
Index: authentication.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import jwt\r\nimport datetime\r\nfrom json import dumps as json_dict\r\nfrom flask import Response\r\nimport post\r\n\r\ndef encode_token(key, username):\r\n    \"\"\"\r\n    Generate authentication token\r\n    :param key:\r\n    :param username:\r\n    :return:\r\n    \"\"\"\r\n\r\n    try:\r\n        payload = {\r\n            'iat': datetime.datetime.utcnow(),\r\n            'username': username\r\n        }\r\n\r\n        token = jwt.encode(\r\n            payload,\r\n            key,\r\n            algorithm='HS256'\r\n        )\r\n\r\n        return token\r\n\r\n    except Exception as e:\r\n        response_json = json_dict({\"status\": \"unable to generate token\"}, indent=4)\r\n        return Response(response_json, status=401, mimetype='application/json')\r\n\r\n\r\ndef authenticated(key, request, username):\r\n    \"\"\"\r\n    Validate a request with a supplied username\r\n    Raises\r\n    :param key:\r\n    :param request:\r\n    :param username:\r\n    :return:\r\n    \"\"\"\r\n\r\n    if 'x-access-tokens' in request.headers:\r\n        token = request.headers['x-access-tokens']\r\n    else:\r\n        return False\r\n\r\n    try:\r\n        token_username = decode_token(key, token)['username']\r\n    except:\r\n        return False\r\n\r\n    if token_username != username:\r\n        return False\r\n\r\n    return True\r\n\r\n\r\ndef decode_token(key, token):\r\n    \"\"\"\r\n    Validate authentication token\r\n    Returns payload\r\n    :param key:\r\n    :param token:\r\n    :return:\r\n    \"\"\"\r\n\r\n    try:\r\n        response = jwt.decode(\r\n            token,\r\n            key,\r\n            algorithms=['HS256']\r\n        )\r\n\r\n        return response\r\n\r\n    except:\r\n        raise Exception\r\n\r\ndef auth_post(key, request, post_id):\r\n    \"\"\"\r\n    Authenticate a post, ie user editing post\r\n    :param post_id:\r\n    :return:\r\n    \"\"\"\r\n\r\n    username = post.get_post(post_id)['username']\r\n\r\n    print(username)\r\n\r\n    return authenticated(key, request, username)\r\n\r\ndef auth_comment(key, request, comment_id):\r\n    \"\"\"\r\n    Authenticate a comment, ie user editing post\r\n    :param comment_id:\r\n    :return:\r\n    \"\"\"\r\n\r\n    username = post.get_comment(comment_id)['username']\r\n\r\n    return authenticated(key, request, username)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/authentication.py b/authentication.py
--- a/authentication.py	(revision 404315a9f24b35c690b7731d6ee58e8eb43e1730)
+++ b/authentication.py	(date 1620662631963)
@@ -11,19 +11,12 @@
     :param username:
     :return:
     """
-
     try:
         payload = {
             'iat': datetime.datetime.utcnow(),
             'username': username
         }
-
-        token = jwt.encode(
-            payload,
-            key,
-            algorithm='HS256'
-        )
-
+        token = jwt.encode(payload,key,algorithm="HS256")
         return token
 
     except Exception as e:
@@ -31,21 +24,15 @@
         return Response(response_json, status=401, mimetype='application/json')
 
 
-def authenticated(key, request, username):
+def authenticated(key, token, username):
     """
     Validate a request with a supplied username
     Raises
     :param key:
-    :param request:
+    :param token:
     :param username:
     :return:
     """
-
-    if 'x-access-tokens' in request.headers:
-        token = request.headers['x-access-tokens']
-    else:
-        return False
-
     try:
         token_username = decode_token(key, token)['username']
     except:
Index: database.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import mysql.connector\r\nimport util\r\nimport time\r\n\r\ngains_db = mysql.connector.connect(\r\n    host=\"localhost\",\r\n    user=\"root\",\r\n    password=\"YES\",\r\n    database=\"mydb\"\r\n)\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/database.py b/database.py
--- a/database.py	(revision 404315a9f24b35c690b7731d6ee58e8eb43e1730)
+++ b/database.py	(date 1620646632869)
@@ -5,7 +5,7 @@
 gains_db = mysql.connector.connect(
     host="localhost",
     user="root",
-    password="YES",
+    password="toor",
     database="mydb"
 )
 
